{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Scikit, good MSE: temmuz+ağustos+eylül ekim full deneme adlı not defterinin kopyası",
      "provenance": [],
      "mount_file_id": "1Z0hUoQp1bkv4V0HUMK_D7sOHyLQUgNDG",
      "authorship_tag": "ABX9TyPCiwrwXqhXCTy9+362C48C",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bselin/Traffic-Density-Forecast-MLP-Model/blob/main/MLP-model%3ATraffic-Density-Forecast\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2oKRrXyPsVRu"
      },
      "source": [
        "import numpy as np \r\n",
        "import pandas as pd \r\n",
        " \r\n",
        "import matplotlib.pyplot as plt \r\n",
        "from mpl_toolkits.mplot3d import Axes3D\r\n",
        " \r\n",
        "from sklearn.preprocessing import MinMaxScaler\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        " \r\n",
        "from keras.models import Sequential\r\n",
        "from keras.layers import Dense\r\n",
        "from keras import metrics\r\n",
        "\r\n",
        "dataset=pd.read_csv('/content/final - Saat-data (1).csv',delimiter=',') \r\n"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HNR80ZWo0OD5",
        "outputId": "600d2608-8793-4668-8220-b8bc79422f85"
      },
      "source": [
        "data=dataset[['MINIMUM_SPEED', 'MAXIMUM_SPEED', 'AVERAGE_SPEED','NUMBER_OF_VEHICLES','1LAG_AVG_SPEED']]\r\n",
        "data\r\n",
        "dataset=data\r\n",
        "print(dataset)\r\n",
        "X = np.array(dataset.iloc[:,1:4])\r\n",
        "L = len(dataset)\r\n",
        "Y = np.array([dataset.iloc[:,4]])\r\n",
        "Y= Y[:,0:L]\r\n",
        "print(X.shape,Y.shape)\r\n",
        "print(X,Y)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "       MINIMUM_SPEED  MAXIMUM_SPEED  ...  NUMBER_OF_VEHICLES  1LAG_AVG_SPEED\n",
            "0                  8             80  ...                  47              30\n",
            "1                  6             80  ...                  81              33\n",
            "2                  8             80  ...                 115              28\n",
            "3                  6             76  ...                 102              32\n",
            "4                  6             72  ...                 106              33\n",
            "...              ...            ...  ...                 ...             ...\n",
            "13320              6             54  ...                  20              31\n",
            "13321              6             57  ...                  25              32\n",
            "13322              6             58  ...                  19              31\n",
            "13323              6             54  ...                  31              29\n",
            "13324              7             57  ...                  34              28\n",
            "\n",
            "[13325 rows x 5 columns]\n",
            "(13325, 3) (1, 13325)\n",
            "[[ 80  40  47]\n",
            " [ 80  30  81]\n",
            " [ 80  33 115]\n",
            " ...\n",
            " [ 58  32  19]\n",
            " [ 54  31  31]\n",
            " [ 57  29  34]] [[30 33 28 ... 31 29 28]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xSA8aqriyiAT",
        "outputId": "7cc8c37d-61d8-41dc-fbe0-048f2ee4d585"
      },
      "source": [
        "Y = np.transpose(Y)\r\n",
        "#_______________________________________________\r\n",
        "\r\n",
        " \r\n",
        "print(X.shape,Y.shape)\r\n",
        "print(X,Y)\r\n"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(13325, 3) (13325, 1)\n",
            "[[ 80  40  47]\n",
            " [ 80  30  81]\n",
            " [ 80  33 115]\n",
            " ...\n",
            " [ 58  32  19]\n",
            " [ 54  31  31]\n",
            " [ 57  29  34]] [[30]\n",
            " [33]\n",
            " [28]\n",
            " ...\n",
            " [31]\n",
            " [29]\n",
            " [28]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9MiaU3os1GWT",
        "outputId": "e890ac1d-5070-4e76-bdb7-0399a4b45504"
      },
      "source": [
        "scaler = MinMaxScaler()\r\n",
        "scaler.fit(X)\r\n",
        "X = scaler.transform(X)\r\n",
        " \r\n",
        "scaler1 = MinMaxScaler()\r\n",
        "scaler1.fit(Y)\r\n",
        "Y = scaler1.transform(Y)\r\n",
        "print(X,Y)"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.33333333 0.35897436 0.07100592]\n",
            " [0.33333333 0.23076923 0.13806706]\n",
            " [0.33333333 0.26923077 0.20512821]\n",
            " ...\n",
            " [0.15873016 0.25641026 0.01577909]\n",
            " [0.12698413 0.24358974 0.03944773]\n",
            " [0.15079365 0.21794872 0.04536489]] [[0.26470588]\n",
            " [0.30882353]\n",
            " [0.23529412]\n",
            " ...\n",
            " [0.27941176]\n",
            " [0.25      ]\n",
            " [0.23529412]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z2TayucKzdb1",
        "outputId": "e8bc80a8-33fe-4788-95fb-6fe1002ab6b4"
      },
      "source": [
        "X_train , X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.3)\r\n",
        "from sklearn.neural_network import MLPRegressor\r\n",
        "from sklearn.metrics import mean_squared_error \r\n",
        "mlp = MLPRegressor(activation='relu', alpha= 0.0001, hidden_layer_sizes= (50, 100, 50), learning_rate= 'constant', solver='adam')\r\n",
        "mlp\r\n",
        "\r\n"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
              "             beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
              "             hidden_layer_sizes=(50, 100, 50), learning_rate='constant',\n",
              "             learning_rate_init=0.001, max_fun=15000, max_iter=200,\n",
              "             momentum=0.9, n_iter_no_change=10, nesterovs_momentum=True,\n",
              "             power_t=0.5, random_state=None, shuffle=True, solver='adam',\n",
              "             tol=0.0001, validation_fraction=0.1, verbose=False,\n",
              "             warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RtfGhBNsVDPY",
        "outputId": "6f875747-f2a9-4e4e-f0ab-82342b8c0a6e"
      },
      "source": [
        "mlp.fit(X_train,Y_train)\r\n",
        "predictions = mlp.predict(X_test)\r\n",
        "predictions1=mlp.predict(X_train)\r\n",
        "print(\"mse_test :\" ,mean_squared_error(Y_test,predictions), \"mse_train :\",mean_squared_error(Y_train,predictions1))\r\n",
        "\r\n"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:1342: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "mse_test : 0.005132632149733535 mse_train : 0.005169494822657186\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "SWD4baXmA90j",
        "outputId": "9d202b7b-f849-4073-e571-2a6cc2586b03"
      },
      "source": [
        " \r\n",
        "plt.figure(3)\r\n",
        "Test= plt.plot(Y_test)\r\n",
        "Predict = plt.plot(predictions)\r\n",
        "plt.legend([Predict,Test],[\"Predicted Data\",\"Real Data\"])\r\n",
        "plt.show()"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: UserWarning: Legend does not support [<matplotlib.lines.Line2D object at 0x7fdce5b768d0>] instances.\n",
            "A proxy artist may be used instead.\n",
            "See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: UserWarning: Legend does not support [<matplotlib.lines.Line2D object at 0x7fdce5a6bfd0>] instances.\n",
            "A proxy artist may be used instead.\n",
            "See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n",
            "  \"\"\"\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t706KHNr7XXA",
        "outputId": "ae2b91c3-9f08-4acc-ba12-e7eb42dfe3cd"
      },
      "source": [
        "Xnew=[[80,  40,  47],\r\n",
        " [80,  30,  81],\r\n",
        " [80,  33, 115]]\r\n",
        "Xnew = scaler.transform(Xnew)\r\n",
        "a=mlp.predict(Xnew)\r\n",
        "print(\"prediction for that input is\" , a)\r\n",
        "\r\n",
        "\r\n"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "prediction for that input is [0.37267214 0.2529851  0.29012414]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qo4zSgYZgC-p"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}