{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Final: Scikit, good MSE: temmuz+ağustos+eylül+ekim",
      "provenance": [],
      "mount_file_id": "1y5BhoUapmDPtQjB-1U8Y-PPhbfvoGpXT",
      "authorship_tag": "ABX9TyPRvSPiw0q/9HWZ6Kz2AR74",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bselin/Traffic-Density-Forecast-MLP-Model/blob/main/Final_commit_MLP_Scikitlearn\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2oKRrXyPsVRu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "outputId": "d9451c57-dec3-4490-a3d4-a976023fed64"
      },
      "source": [
        "import numpy as np \r\n",
        "import pandas as pd \r\n",
        "import matplotlib.pyplot as plt \r\n",
        "from sklearn.preprocessing import MinMaxScaler\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "from sklearn.neural_network import MLPRegressor\r\n",
        "from sklearn.metrics import mean_squared_error \r\n",
        "\r\n",
        "dataset=pd.read_csv('/content/drive/MyDrive/istanbul_traffic_hourly.csv',delimiter=',') \r\n",
        "dataset"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DATE_TIME</th>\n",
              "      <th>NUMBER_OF_VEHICLES</th>\n",
              "      <th>MINIMUM_SPEED</th>\n",
              "      <th>MAXIMUM_SPEED</th>\n",
              "      <th>AVERAGE_SPEED</th>\n",
              "      <th>NEXT_HOUR_AVG_SPEED</th>\n",
              "      <th>GEOHASH</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-09-07 06:00:00</td>\n",
              "      <td>47</td>\n",
              "      <td>8</td>\n",
              "      <td>80</td>\n",
              "      <td>40</td>\n",
              "      <td>30</td>\n",
              "      <td>sxk97y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-09-07 07:00:00</td>\n",
              "      <td>81</td>\n",
              "      <td>6</td>\n",
              "      <td>80</td>\n",
              "      <td>30</td>\n",
              "      <td>33</td>\n",
              "      <td>sxk97y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-09-07 08:00:00</td>\n",
              "      <td>115</td>\n",
              "      <td>8</td>\n",
              "      <td>80</td>\n",
              "      <td>33</td>\n",
              "      <td>28</td>\n",
              "      <td>sxk97y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-09-07 09:00:00</td>\n",
              "      <td>102</td>\n",
              "      <td>6</td>\n",
              "      <td>76</td>\n",
              "      <td>28</td>\n",
              "      <td>32</td>\n",
              "      <td>sxk97y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-09-07 10:00:00</td>\n",
              "      <td>106</td>\n",
              "      <td>6</td>\n",
              "      <td>72</td>\n",
              "      <td>32</td>\n",
              "      <td>33</td>\n",
              "      <td>sxk97y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13320</th>\n",
              "      <td>2020-07-31 13:00:00</td>\n",
              "      <td>20</td>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>31</td>\n",
              "      <td>31</td>\n",
              "      <td>sxk9sw</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13321</th>\n",
              "      <td>2020-07-31 14:00:00</td>\n",
              "      <td>25</td>\n",
              "      <td>6</td>\n",
              "      <td>57</td>\n",
              "      <td>31</td>\n",
              "      <td>32</td>\n",
              "      <td>sxk9sw</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13322</th>\n",
              "      <td>2020-07-31 15:00:00</td>\n",
              "      <td>19</td>\n",
              "      <td>6</td>\n",
              "      <td>58</td>\n",
              "      <td>32</td>\n",
              "      <td>31</td>\n",
              "      <td>sxk9sw</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13323</th>\n",
              "      <td>2020-07-31 16:00:00</td>\n",
              "      <td>31</td>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>31</td>\n",
              "      <td>29</td>\n",
              "      <td>sxk9sw</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13324</th>\n",
              "      <td>2020-07-31 17:00:00</td>\n",
              "      <td>34</td>\n",
              "      <td>7</td>\n",
              "      <td>57</td>\n",
              "      <td>29</td>\n",
              "      <td>28</td>\n",
              "      <td>sxk9sw</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>13325 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                 DATE_TIME  NUMBER_OF_VEHICLES  ...  NEXT_HOUR_AVG_SPEED  GEOHASH\n",
              "0      2020-09-07 06:00:00                  47  ...                   30   sxk97y\n",
              "1      2020-09-07 07:00:00                  81  ...                   33   sxk97y\n",
              "2      2020-09-07 08:00:00                 115  ...                   28   sxk97y\n",
              "3      2020-09-07 09:00:00                 102  ...                   32   sxk97y\n",
              "4      2020-09-07 10:00:00                 106  ...                   33   sxk97y\n",
              "...                    ...                 ...  ...                  ...      ...\n",
              "13320  2020-07-31 13:00:00                  20  ...                   31   sxk9sw\n",
              "13321  2020-07-31 14:00:00                  25  ...                   32   sxk9sw\n",
              "13322  2020-07-31 15:00:00                  19  ...                   31   sxk9sw\n",
              "13323  2020-07-31 16:00:00                  31  ...                   29   sxk9sw\n",
              "13324  2020-07-31 17:00:00                  34  ...                   28   sxk9sw\n",
              "\n",
              "[13325 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "HNR80ZWo0OD5",
        "outputId": "cab55043-709c-4ae6-beb2-44a4ddc1dbcd"
      },
      "source": [
        "#generate the dataset with the necessary columns only\r\n",
        "dataset=dataset[['MINIMUM_SPEED', 'MAXIMUM_SPEED', 'AVERAGE_SPEED','NUMBER_OF_VEHICLES','NEXT_HOUR_AVG_SPEED']]\r\n",
        "dataset\r\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MINIMUM_SPEED</th>\n",
              "      <th>MAXIMUM_SPEED</th>\n",
              "      <th>AVERAGE_SPEED</th>\n",
              "      <th>NUMBER_OF_VEHICLES</th>\n",
              "      <th>NEXT_HOUR_AVG_SPEED</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8</td>\n",
              "      <td>80</td>\n",
              "      <td>40</td>\n",
              "      <td>47</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6</td>\n",
              "      <td>80</td>\n",
              "      <td>30</td>\n",
              "      <td>81</td>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>80</td>\n",
              "      <td>33</td>\n",
              "      <td>115</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6</td>\n",
              "      <td>76</td>\n",
              "      <td>28</td>\n",
              "      <td>102</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6</td>\n",
              "      <td>72</td>\n",
              "      <td>32</td>\n",
              "      <td>106</td>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13320</th>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>31</td>\n",
              "      <td>20</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13321</th>\n",
              "      <td>6</td>\n",
              "      <td>57</td>\n",
              "      <td>31</td>\n",
              "      <td>25</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13322</th>\n",
              "      <td>6</td>\n",
              "      <td>58</td>\n",
              "      <td>32</td>\n",
              "      <td>19</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13323</th>\n",
              "      <td>6</td>\n",
              "      <td>54</td>\n",
              "      <td>31</td>\n",
              "      <td>31</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13324</th>\n",
              "      <td>7</td>\n",
              "      <td>57</td>\n",
              "      <td>29</td>\n",
              "      <td>34</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>13325 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       MINIMUM_SPEED  MAXIMUM_SPEED  ...  NUMBER_OF_VEHICLES  NEXT_HOUR_AVG_SPEED\n",
              "0                  8             80  ...                  47                   30\n",
              "1                  6             80  ...                  81                   33\n",
              "2                  8             80  ...                 115                   28\n",
              "3                  6             76  ...                 102                   32\n",
              "4                  6             72  ...                 106                   33\n",
              "...              ...            ...  ...                 ...                  ...\n",
              "13320              6             54  ...                  20                   31\n",
              "13321              6             57  ...                  25                   32\n",
              "13322              6             58  ...                  19                   31\n",
              "13323              6             54  ...                  31                   29\n",
              "13324              7             57  ...                  34                   28\n",
              "\n",
              "[13325 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O6Xe5C4Uui2U",
        "outputId": "3c557771-738b-45c4-f9fa-6ded7065c6fb"
      },
      "source": [
        "#indexing X as input variables: maximum speed,average speed and number of vehicles at that hour.\r\n",
        "#indexing Y as target variable: next hour's average speed\r\n",
        "X = np.array(dataset.iloc[:,1:4])\r\n",
        "Y = np.array([dataset.iloc[:,4]])\r\n",
        "L = len(dataset)\r\n",
        "Y= Y[:,0:L]\r\n",
        "print('initial shapes of the input and output: \\n ' ,X.shape,Y.shape)\r\n",
        "Y = np.transpose(Y)\r\n",
        "#final X and Y\r\n",
        "print('final shapes of the input and output: \\n' , X.shape,Y.shape)\r\n",
        "print('input: \\n', X, '\\n target: \\n ',Y)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "initial shapes of the input and output: \n",
            "  (13325, 3) (1, 13325)\n",
            "final shapes of the input and output: \n",
            " (13325, 3) (13325, 1)\n",
            "input: \n",
            " [[ 80  40  47]\n",
            " [ 80  30  81]\n",
            " [ 80  33 115]\n",
            " ...\n",
            " [ 58  32  19]\n",
            " [ 54  31  31]\n",
            " [ 57  29  34]] \n",
            " target: \n",
            "  [[30]\n",
            " [33]\n",
            " [28]\n",
            " ...\n",
            " [31]\n",
            " [29]\n",
            " [28]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9MiaU3os1GWT",
        "outputId": "0b3eea1a-26bd-4cf8-bcdb-91ae71c8fd5e"
      },
      "source": [
        "#scaling the input and output to train the model correct \r\n",
        "scaler = MinMaxScaler()\r\n",
        "scaler.fit(X)\r\n",
        "X = scaler.transform(X)\r\n",
        " \r\n",
        "scaler1 = MinMaxScaler()\r\n",
        "scaler1.fit(Y)\r\n",
        "Y = scaler1.transform(Y)\r\n",
        "print(X,Y)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.33333333 0.35897436 0.07100592]\n",
            " [0.33333333 0.23076923 0.13806706]\n",
            " [0.33333333 0.26923077 0.20512821]\n",
            " ...\n",
            " [0.15873016 0.25641026 0.01577909]\n",
            " [0.12698413 0.24358974 0.03944773]\n",
            " [0.15079365 0.21794872 0.04536489]] [[0.26470588]\n",
            " [0.30882353]\n",
            " [0.23529412]\n",
            " ...\n",
            " [0.27941176]\n",
            " [0.25      ]\n",
            " [0.23529412]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UoIP7etK-2Jw"
      },
      "source": [
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2,random_state=0)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 463
        },
        "id": "SWD4baXmA90j",
        "outputId": "91694d4d-d47a-4721-d128-257932a4c57a"
      },
      "source": [
        "#putting the best model parameters into the model (after Grid Search CV is applied)\r\n",
        "mlp = MLPRegressor(activation='relu',solver='lbfgs',hidden_layer_sizes=(8,10),learning_rate='adaptive',\r\n",
        "              learning_rate_init=0.8,max_iter=1000,momentum=0.6,early_stopping=True)\r\n",
        "mlp.fit(X_train,Y_train)\r\n",
        "predictions = mlp.predict(X_test)\r\n",
        "predictions1=mlp.predict(X_train)\r\n",
        "plt.figure(3)\r\n",
        "Test= plt.plot(Y_test)\r\n",
        "Predict = plt.plot(predictions)\r\n",
        "plt.legend([Predict,Test],[\"Predicted Data\",\"Real Data\"])\r\n",
        "plt.show()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:1342: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: UserWarning: Legend does not support [<matplotlib.lines.Line2D object at 0x7efd977b4ac8>] instances.\n",
            "A proxy artist may be used instead.\n",
            "See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n",
            "  # Remove the CWD from sys.path while we load stuff.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:10: UserWarning: Legend does not support [<matplotlib.lines.Line2D object at 0x7efd947b22e8>] instances.\n",
            "A proxy artist may be used instead.\n",
            "See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n",
            "  # Remove the CWD from sys.path while we load stuff.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S-xhKVTaFTqy",
        "outputId": "9cf973eb-5b92-4dd4-ee4d-20f0c433d415"
      },
      "source": [
        "print(\"mse_test :\" ,mean_squared_error(Y_test,predictions), \"mse_train :\",mean_squared_error(Y_train,predictions1))"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "mse_test : 0.005105637476076603 mse_train : 0.0052909393899177445\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t706KHNr7XXA",
        "outputId": "325da02f-d118-44cc-b64e-bed57b507926"
      },
      "source": [
        "Xnew=[[80,  40,  47],\r\n",
        " [80,  30,  81],\r\n",
        " [80,  33, 115]]\r\n",
        "Xnew = scaler.transform(Xnew)\r\n",
        "a=mlp.predict(Xnew)\r\n",
        "print(\"prediction for that input is\" , a)\r\n",
        "\r\n",
        "\r\n"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "prediction for that input is [0.38092114 0.2544342  0.29199352]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qo4zSgYZgC-p"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}